Commands And Explanations For Mongodb :- 
-> Database are collections
-> Tables are collections
-> Rows are called as documents
-> it works on BSON(advanced form of JSON , fast and more storage) 
1) show dbs -> to see the present database
2) To create a database -> use database-name (example :- use student), controlled will be switched to db student
3) after creating db , show dbs -> student will not be visible , because its empty , to make it visible there should be some data entered
4) Create one table (collection) -> db.studentdata.insertOne({name:"Turwash", section:"KM033",rollno:61})
5) Automatically an object id will be created for student collection 
{
  acknowledged: true,
  insertedId: ObjectId("642d47b95e54cff027775c71")
}
6) Now show dbs -> student databse will appear
7) To check collection(table) is there or not -> show collections
8) To check documents (rows) inside collection(table) -> db.nameofcollection.find() , (example db.studentdata.find())
[
  {
    _id: ObjectId("642d47b95e54cff027775c71"),
    name: 'Turwash',
    section: 'KM033',
    rollno: 61
  }
]

9) Insert multiple documents -> db.studentdata.insertMany([{name:"Chakraborty",section:"K20RB",rollno:68},{name:"Tanmay",section:"K20RB",rollno:65}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("642d49b45e54cff027775c72"),
    '1': ObjectId("642d49b45e54cff027775c73")
  }
}

10) Now if you will check -> db.studentdata.find()
[
  {
    _id: ObjectId("642d47b95e54cff027775c71"),
    name: 'Turwash',
    section: 'KM033',
    rollno: 61
  },
  {
    _id: ObjectId("642d49b45e54cff027775c72"),
    name: 'Chakraborty',
    section: 'K20RB',
    rollno: 68
  },
  {
    _id: ObjectId("642d49b45e54cff027775c73"),
    name: 'Tanmay',
    section: 'K20RB',
    rollno: 65
  }
]

11) Fetching the document from collection where name is Turwash 
-> db.studentdata.find({name:"Turwash"})
[
  {
    _id: ObjectId("642d47b95e54cff027775c71"),
    name: 'Turwash',
    section: 'KM033',
    rollno: 61
  }
]

12) Fetching the document from collection where name is Turwash , BUT EXCLUDING NAME from it
-> db.studentdata.find({name:"Turwash"},{name:1})  // 1 is for True 
-> db.studentdata.find({name:"Turwash"},{name:0})  // 0 is for False
"1 means to show the property only"
" 0 means to exclude the property"
Similarly,
to Exclude the autogenerated ID -> db.studentdata.find({name:"Turwash"},{_id:0})

13) Only want to fetch data whose Section is K20RB (FILTERING OF DATA)
-> db.studentdata.find({section:"K20RB"})

NOW LIMITING THE FILTERING TO FETCH ONLY FIRST DATA 

-> db.studentdata.find({section:"K20RB"}).limit(1) // first matching field will be fetched
OR ALTERNATIVE FOR THIS IS 
db.studentdata.findOne({section:"K20RB"}) // first matching field will be fetched

14) Now to Fetch the second field by ignoring the 1st one and fetch only second
-> use skip(1)
-> db.studentdata.find({section:"K20RB"}).limit(1).skip(1)

15) UPDATION OF NAME FROM TABLE COLLECTION : - 
we will use $set query
db.studentdata.updateOne({name:"Aman"},{$set:{name:"Rohan"}})
then check using -> db.studentdata.find() 

16) NOW UPDATING MANY ROWS DATA AT ONCE :- 
db.studentdata.updateMany({section:"K20RB"},{$set:{section:"K20RC"}})
then check using -> db.studentdata.find() 

17) To add the "Address" field to the any document in the "studentdata" collection, you can use the updateOne method with the $set operator. Here's the command:
db.studentdata.updateOne(
  { name: "Tanmay" },
  { $set: { Address: "Punjab" } }
)


18) SORTING OF DATA IN COLLECTION 
-> db.studentdata.find({}, {id: 1, _id: 0}).sort({id: 1}) // ASCENDING
-> db.studentdata.find({}, {id: 1, _id: 0}).sort({id: -1}) // DESCENDING


19) DELETE A FIELD WHERE ROLL NUMBER IS 23
-> db.studentdata.deleteMany({rollno:23})

20) DELETE ALL THE DOCUMENTS FROM DATABASE : 
db.studentdata.deleteMany({})

21) DELETING THE DATABASE :
-> use student // to make sure u r in student database
then,
-> db.dropDatabase()

22) Comparison operators , symbols wil not be used
$eq(equal to), $ne(not equal) , $gt (greater than) , $lt (less than) , $gte(greater than equal to), $lte(less than equal to) , $in (used to check if the value is present in the array or not )

